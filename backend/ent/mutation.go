// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/pongsakorn-maker/entgo-playground/ent/playlist"
	"github.com/pongsakorn-maker/entgo-playground/ent/playlistvideo"
	"github.com/pongsakorn-maker/entgo-playground/ent/resolution"
	"github.com/pongsakorn-maker/entgo-playground/ent/user"
	"github.com/pongsakorn-maker/entgo-playground/ent/video"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePlaylist      = "Playlist"
	TypePlaylistVideo = "PlaylistVideo"
	TypeResolution    = "Resolution"
	TypeUser          = "User"
	TypeVideo         = "Video"
)

// PlaylistMutation represents an operation that mutate the Playlists
// nodes in the graph.
type PlaylistMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_Playlist_ID          *int
	add_Playlist_ID       *int
	clearedFields         map[string]struct{}
	playlist_owner        *int
	clearedplaylist_owner bool
	done                  bool
	oldValue              func(context.Context) (*Playlist, error)
}

var _ ent.Mutation = (*PlaylistMutation)(nil)

// playlistOption allows to manage the mutation configuration using functional options.
type playlistOption func(*PlaylistMutation)

// newPlaylistMutation creates new mutation for $n.Name.
func newPlaylistMutation(c config, op Op, opts ...playlistOption) *PlaylistMutation {
	m := &PlaylistMutation{
		config:        c,
		op:            op,
		typ:           TypePlaylist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlaylistID sets the id field of the mutation.
func withPlaylistID(id int) playlistOption {
	return func(m *PlaylistMutation) {
		var (
			err   error
			once  sync.Once
			value *Playlist
		)
		m.oldValue = func(ctx context.Context) (*Playlist, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Playlist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlaylist sets the old Playlist of the mutation.
func withPlaylist(node *Playlist) playlistOption {
	return func(m *PlaylistMutation) {
		m.oldValue = func(context.Context) (*Playlist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlaylistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlaylistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PlaylistMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPlaylistID sets the Playlist_ID field.
func (m *PlaylistMutation) SetPlaylistID(i int) {
	m._Playlist_ID = &i
	m.add_Playlist_ID = nil
}

// PlaylistID returns the Playlist_ID value in the mutation.
func (m *PlaylistMutation) PlaylistID() (r int, exists bool) {
	v := m._Playlist_ID
	if v == nil {
		return
	}
	return *v, true
}

// OldPlaylistID returns the old Playlist_ID value of the Playlist.
// If the Playlist object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PlaylistMutation) OldPlaylistID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPlaylistID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPlaylistID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlaylistID: %w", err)
	}
	return oldValue.PlaylistID, nil
}

// AddPlaylistID adds i to Playlist_ID.
func (m *PlaylistMutation) AddPlaylistID(i int) {
	if m.add_Playlist_ID != nil {
		*m.add_Playlist_ID += i
	} else {
		m.add_Playlist_ID = &i
	}
}

// AddedPlaylistID returns the value that was added to the Playlist_ID field in this mutation.
func (m *PlaylistMutation) AddedPlaylistID() (r int, exists bool) {
	v := m.add_Playlist_ID
	if v == nil {
		return
	}
	return *v, true
}

// ResetPlaylistID reset all changes of the "Playlist_ID" field.
func (m *PlaylistMutation) ResetPlaylistID() {
	m._Playlist_ID = nil
	m.add_Playlist_ID = nil
}

// SetPlaylistOwnerID sets the playlist_owner edge to User by id.
func (m *PlaylistMutation) SetPlaylistOwnerID(id int) {
	m.playlist_owner = &id
}

// ClearPlaylistOwner clears the playlist_owner edge to User.
func (m *PlaylistMutation) ClearPlaylistOwner() {
	m.clearedplaylist_owner = true
}

// PlaylistOwnerCleared returns if the edge playlist_owner was cleared.
func (m *PlaylistMutation) PlaylistOwnerCleared() bool {
	return m.clearedplaylist_owner
}

// PlaylistOwnerID returns the playlist_owner id in the mutation.
func (m *PlaylistMutation) PlaylistOwnerID() (id int, exists bool) {
	if m.playlist_owner != nil {
		return *m.playlist_owner, true
	}
	return
}

// PlaylistOwnerIDs returns the playlist_owner ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PlaylistOwnerID instead. It exists only for internal usage by the builders.
func (m *PlaylistMutation) PlaylistOwnerIDs() (ids []int) {
	if id := m.playlist_owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlaylistOwner reset all changes of the "playlist_owner" edge.
func (m *PlaylistMutation) ResetPlaylistOwner() {
	m.playlist_owner = nil
	m.clearedplaylist_owner = false
}

// Op returns the operation name.
func (m *PlaylistMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Playlist).
func (m *PlaylistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PlaylistMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Playlist_ID != nil {
		fields = append(fields, playlist.FieldPlaylistID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PlaylistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playlist.FieldPlaylistID:
		return m.PlaylistID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PlaylistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playlist.FieldPlaylistID:
		return m.OldPlaylistID(ctx)
	}
	return nil, fmt.Errorf("unknown Playlist field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PlaylistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playlist.FieldPlaylistID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlaylistID(v)
		return nil
	}
	return fmt.Errorf("unknown Playlist field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PlaylistMutation) AddedFields() []string {
	var fields []string
	if m.add_Playlist_ID != nil {
		fields = append(fields, playlist.FieldPlaylistID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PlaylistMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case playlist.FieldPlaylistID:
		return m.AddedPlaylistID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PlaylistMutation) AddField(name string, value ent.Value) error {
	switch name {
	case playlist.FieldPlaylistID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlaylistID(v)
		return nil
	}
	return fmt.Errorf("unknown Playlist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PlaylistMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PlaylistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlaylistMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Playlist nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PlaylistMutation) ResetField(name string) error {
	switch name {
	case playlist.FieldPlaylistID:
		m.ResetPlaylistID()
		return nil
	}
	return fmt.Errorf("unknown Playlist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PlaylistMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.playlist_owner != nil {
		edges = append(edges, playlist.EdgePlaylistOwner)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PlaylistMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playlist.EdgePlaylistOwner:
		if id := m.playlist_owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PlaylistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PlaylistMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PlaylistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedplaylist_owner {
		edges = append(edges, playlist.EdgePlaylistOwner)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PlaylistMutation) EdgeCleared(name string) bool {
	switch name {
	case playlist.EdgePlaylistOwner:
		return m.clearedplaylist_owner
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PlaylistMutation) ClearEdge(name string) error {
	switch name {
	case playlist.EdgePlaylistOwner:
		m.ClearPlaylistOwner()
		return nil
	}
	return fmt.Errorf("unknown Playlist unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PlaylistMutation) ResetEdge(name string) error {
	switch name {
	case playlist.EdgePlaylistOwner:
		m.ResetPlaylistOwner()
		return nil
	}
	return fmt.Errorf("unknown Playlist edge %s", name)
}

// PlaylistVideoMutation represents an operation that mutate the PlaylistVideos
// nodes in the graph.
type PlaylistVideoMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_PlaylistVideo_ID    *int
	add_PlaylistVideo_ID *int
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*PlaylistVideo, error)
}

var _ ent.Mutation = (*PlaylistVideoMutation)(nil)

// playlistvideoOption allows to manage the mutation configuration using functional options.
type playlistvideoOption func(*PlaylistVideoMutation)

// newPlaylistVideoMutation creates new mutation for $n.Name.
func newPlaylistVideoMutation(c config, op Op, opts ...playlistvideoOption) *PlaylistVideoMutation {
	m := &PlaylistVideoMutation{
		config:        c,
		op:            op,
		typ:           TypePlaylistVideo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlaylistVideoID sets the id field of the mutation.
func withPlaylistVideoID(id int) playlistvideoOption {
	return func(m *PlaylistVideoMutation) {
		var (
			err   error
			once  sync.Once
			value *PlaylistVideo
		)
		m.oldValue = func(ctx context.Context) (*PlaylistVideo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlaylistVideo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlaylistVideo sets the old PlaylistVideo of the mutation.
func withPlaylistVideo(node *PlaylistVideo) playlistvideoOption {
	return func(m *PlaylistVideoMutation) {
		m.oldValue = func(context.Context) (*PlaylistVideo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlaylistVideoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlaylistVideoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PlaylistVideoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPlaylistVideoID sets the PlaylistVideo_ID field.
func (m *PlaylistVideoMutation) SetPlaylistVideoID(i int) {
	m._PlaylistVideo_ID = &i
	m.add_PlaylistVideo_ID = nil
}

// PlaylistVideoID returns the PlaylistVideo_ID value in the mutation.
func (m *PlaylistVideoMutation) PlaylistVideoID() (r int, exists bool) {
	v := m._PlaylistVideo_ID
	if v == nil {
		return
	}
	return *v, true
}

// OldPlaylistVideoID returns the old PlaylistVideo_ID value of the PlaylistVideo.
// If the PlaylistVideo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PlaylistVideoMutation) OldPlaylistVideoID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPlaylistVideoID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPlaylistVideoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlaylistVideoID: %w", err)
	}
	return oldValue.PlaylistVideoID, nil
}

// AddPlaylistVideoID adds i to PlaylistVideo_ID.
func (m *PlaylistVideoMutation) AddPlaylistVideoID(i int) {
	if m.add_PlaylistVideo_ID != nil {
		*m.add_PlaylistVideo_ID += i
	} else {
		m.add_PlaylistVideo_ID = &i
	}
}

// AddedPlaylistVideoID returns the value that was added to the PlaylistVideo_ID field in this mutation.
func (m *PlaylistVideoMutation) AddedPlaylistVideoID() (r int, exists bool) {
	v := m.add_PlaylistVideo_ID
	if v == nil {
		return
	}
	return *v, true
}

// ResetPlaylistVideoID reset all changes of the "PlaylistVideo_ID" field.
func (m *PlaylistVideoMutation) ResetPlaylistVideoID() {
	m._PlaylistVideo_ID = nil
	m.add_PlaylistVideo_ID = nil
}

// Op returns the operation name.
func (m *PlaylistVideoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PlaylistVideo).
func (m *PlaylistVideoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PlaylistVideoMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._PlaylistVideo_ID != nil {
		fields = append(fields, playlistvideo.FieldPlaylistVideoID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PlaylistVideoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playlistvideo.FieldPlaylistVideoID:
		return m.PlaylistVideoID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PlaylistVideoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playlistvideo.FieldPlaylistVideoID:
		return m.OldPlaylistVideoID(ctx)
	}
	return nil, fmt.Errorf("unknown PlaylistVideo field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PlaylistVideoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playlistvideo.FieldPlaylistVideoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlaylistVideoID(v)
		return nil
	}
	return fmt.Errorf("unknown PlaylistVideo field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PlaylistVideoMutation) AddedFields() []string {
	var fields []string
	if m.add_PlaylistVideo_ID != nil {
		fields = append(fields, playlistvideo.FieldPlaylistVideoID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PlaylistVideoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case playlistvideo.FieldPlaylistVideoID:
		return m.AddedPlaylistVideoID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PlaylistVideoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case playlistvideo.FieldPlaylistVideoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlaylistVideoID(v)
		return nil
	}
	return fmt.Errorf("unknown PlaylistVideo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PlaylistVideoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PlaylistVideoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlaylistVideoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PlaylistVideo nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PlaylistVideoMutation) ResetField(name string) error {
	switch name {
	case playlistvideo.FieldPlaylistVideoID:
		m.ResetPlaylistVideoID()
		return nil
	}
	return fmt.Errorf("unknown PlaylistVideo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PlaylistVideoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PlaylistVideoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PlaylistVideoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PlaylistVideoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PlaylistVideoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PlaylistVideoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PlaylistVideoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PlaylistVideo unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PlaylistVideoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PlaylistVideo edge %s", name)
}

// ResolutionMutation represents an operation that mutate the Resolutions
// nodes in the graph.
type ResolutionMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_Resolution_ID    *int
	add_Resolution_ID *int
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Resolution, error)
}

var _ ent.Mutation = (*ResolutionMutation)(nil)

// resolutionOption allows to manage the mutation configuration using functional options.
type resolutionOption func(*ResolutionMutation)

// newResolutionMutation creates new mutation for $n.Name.
func newResolutionMutation(c config, op Op, opts ...resolutionOption) *ResolutionMutation {
	m := &ResolutionMutation{
		config:        c,
		op:            op,
		typ:           TypeResolution,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResolutionID sets the id field of the mutation.
func withResolutionID(id int) resolutionOption {
	return func(m *ResolutionMutation) {
		var (
			err   error
			once  sync.Once
			value *Resolution
		)
		m.oldValue = func(ctx context.Context) (*Resolution, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Resolution.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResolution sets the old Resolution of the mutation.
func withResolution(node *Resolution) resolutionOption {
	return func(m *ResolutionMutation) {
		m.oldValue = func(context.Context) (*Resolution, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResolutionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResolutionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ResolutionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetResolutionID sets the Resolution_ID field.
func (m *ResolutionMutation) SetResolutionID(i int) {
	m._Resolution_ID = &i
	m.add_Resolution_ID = nil
}

// ResolutionID returns the Resolution_ID value in the mutation.
func (m *ResolutionMutation) ResolutionID() (r int, exists bool) {
	v := m._Resolution_ID
	if v == nil {
		return
	}
	return *v, true
}

// OldResolutionID returns the old Resolution_ID value of the Resolution.
// If the Resolution object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ResolutionMutation) OldResolutionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResolutionID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResolutionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResolutionID: %w", err)
	}
	return oldValue.ResolutionID, nil
}

// AddResolutionID adds i to Resolution_ID.
func (m *ResolutionMutation) AddResolutionID(i int) {
	if m.add_Resolution_ID != nil {
		*m.add_Resolution_ID += i
	} else {
		m.add_Resolution_ID = &i
	}
}

// AddedResolutionID returns the value that was added to the Resolution_ID field in this mutation.
func (m *ResolutionMutation) AddedResolutionID() (r int, exists bool) {
	v := m.add_Resolution_ID
	if v == nil {
		return
	}
	return *v, true
}

// ResetResolutionID reset all changes of the "Resolution_ID" field.
func (m *ResolutionMutation) ResetResolutionID() {
	m._Resolution_ID = nil
	m.add_Resolution_ID = nil
}

// Op returns the operation name.
func (m *ResolutionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Resolution).
func (m *ResolutionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ResolutionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Resolution_ID != nil {
		fields = append(fields, resolution.FieldResolutionID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ResolutionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case resolution.FieldResolutionID:
		return m.ResolutionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ResolutionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case resolution.FieldResolutionID:
		return m.OldResolutionID(ctx)
	}
	return nil, fmt.Errorf("unknown Resolution field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ResolutionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case resolution.FieldResolutionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResolutionID(v)
		return nil
	}
	return fmt.Errorf("unknown Resolution field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ResolutionMutation) AddedFields() []string {
	var fields []string
	if m.add_Resolution_ID != nil {
		fields = append(fields, resolution.FieldResolutionID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ResolutionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case resolution.FieldResolutionID:
		return m.AddedResolutionID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ResolutionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case resolution.FieldResolutionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddResolutionID(v)
		return nil
	}
	return fmt.Errorf("unknown Resolution numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ResolutionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ResolutionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResolutionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Resolution nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ResolutionMutation) ResetField(name string) error {
	switch name {
	case resolution.FieldResolutionID:
		m.ResetResolutionID()
		return nil
	}
	return fmt.Errorf("unknown Resolution field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ResolutionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ResolutionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ResolutionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ResolutionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ResolutionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ResolutionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ResolutionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Resolution unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ResolutionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Resolution edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_User_ID         *int
	add_User_ID      *int
	clearedFields    map[string]struct{}
	playlists        map[int]struct{}
	removedplaylists map[int]struct{}
	videos           map[int]struct{}
	removedvideos    map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the User_ID field.
func (m *UserMutation) SetUserID(i int) {
	m._User_ID = &i
	m.add_User_ID = nil
}

// UserID returns the User_ID value in the mutation.
func (m *UserMutation) UserID() (r int, exists bool) {
	v := m._User_ID
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old User_ID value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to User_ID.
func (m *UserMutation) AddUserID(i int) {
	if m.add_User_ID != nil {
		*m.add_User_ID += i
	} else {
		m.add_User_ID = &i
	}
}

// AddedUserID returns the value that was added to the User_ID field in this mutation.
func (m *UserMutation) AddedUserID() (r int, exists bool) {
	v := m.add_User_ID
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID reset all changes of the "User_ID" field.
func (m *UserMutation) ResetUserID() {
	m._User_ID = nil
	m.add_User_ID = nil
}

// AddPlaylistIDs adds the playlists edge to Playlist by ids.
func (m *UserMutation) AddPlaylistIDs(ids ...int) {
	if m.playlists == nil {
		m.playlists = make(map[int]struct{})
	}
	for i := range ids {
		m.playlists[ids[i]] = struct{}{}
	}
}

// RemovePlaylistIDs removes the playlists edge to Playlist by ids.
func (m *UserMutation) RemovePlaylistIDs(ids ...int) {
	if m.removedplaylists == nil {
		m.removedplaylists = make(map[int]struct{})
	}
	for i := range ids {
		m.removedplaylists[ids[i]] = struct{}{}
	}
}

// RemovedPlaylists returns the removed ids of playlists.
func (m *UserMutation) RemovedPlaylistsIDs() (ids []int) {
	for id := range m.removedplaylists {
		ids = append(ids, id)
	}
	return
}

// PlaylistsIDs returns the playlists ids in the mutation.
func (m *UserMutation) PlaylistsIDs() (ids []int) {
	for id := range m.playlists {
		ids = append(ids, id)
	}
	return
}

// ResetPlaylists reset all changes of the "playlists" edge.
func (m *UserMutation) ResetPlaylists() {
	m.playlists = nil
	m.removedplaylists = nil
}

// AddVideoIDs adds the videos edge to Video by ids.
func (m *UserMutation) AddVideoIDs(ids ...int) {
	if m.videos == nil {
		m.videos = make(map[int]struct{})
	}
	for i := range ids {
		m.videos[ids[i]] = struct{}{}
	}
}

// RemoveVideoIDs removes the videos edge to Video by ids.
func (m *UserMutation) RemoveVideoIDs(ids ...int) {
	if m.removedvideos == nil {
		m.removedvideos = make(map[int]struct{})
	}
	for i := range ids {
		m.removedvideos[ids[i]] = struct{}{}
	}
}

// RemovedVideos returns the removed ids of videos.
func (m *UserMutation) RemovedVideosIDs() (ids []int) {
	for id := range m.removedvideos {
		ids = append(ids, id)
	}
	return
}

// VideosIDs returns the videos ids in the mutation.
func (m *UserMutation) VideosIDs() (ids []int) {
	for id := range m.videos {
		ids = append(ids, id)
	}
	return
}

// ResetVideos reset all changes of the "videos" edge.
func (m *UserMutation) ResetVideos() {
	m.videos = nil
	m.removedvideos = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._User_ID != nil {
		fields = append(fields, user.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.add_User_ID != nil {
		fields = append(fields, user.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.playlists != nil {
		edges = append(edges, user.EdgePlaylists)
	}
	if m.videos != nil {
		edges = append(edges, user.EdgeVideos)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.playlists))
		for id := range m.playlists {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVideos:
		ids := make([]ent.Value, 0, len(m.videos))
		for id := range m.videos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedplaylists != nil {
		edges = append(edges, user.EdgePlaylists)
	}
	if m.removedvideos != nil {
		edges = append(edges, user.EdgeVideos)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.removedplaylists))
		for id := range m.removedplaylists {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVideos:
		ids := make([]ent.Value, 0, len(m.removedvideos))
		for id := range m.removedvideos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePlaylists:
		m.ResetPlaylists()
		return nil
	case user.EdgeVideos:
		m.ResetVideos()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// VideoMutation represents an operation that mutate the Videos
// nodes in the graph.
type VideoMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Video_ID     *int
	add_Video_ID  *int
	clearedFields map[string]struct{}
	owner         *int
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*Video, error)
}

var _ ent.Mutation = (*VideoMutation)(nil)

// videoOption allows to manage the mutation configuration using functional options.
type videoOption func(*VideoMutation)

// newVideoMutation creates new mutation for $n.Name.
func newVideoMutation(c config, op Op, opts ...videoOption) *VideoMutation {
	m := &VideoMutation{
		config:        c,
		op:            op,
		typ:           TypeVideo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVideoID sets the id field of the mutation.
func withVideoID(id int) videoOption {
	return func(m *VideoMutation) {
		var (
			err   error
			once  sync.Once
			value *Video
		)
		m.oldValue = func(ctx context.Context) (*Video, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Video.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVideo sets the old Video of the mutation.
func withVideo(node *Video) videoOption {
	return func(m *VideoMutation) {
		m.oldValue = func(context.Context) (*Video, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VideoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VideoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *VideoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetVideoID sets the Video_ID field.
func (m *VideoMutation) SetVideoID(i int) {
	m._Video_ID = &i
	m.add_Video_ID = nil
}

// VideoID returns the Video_ID value in the mutation.
func (m *VideoMutation) VideoID() (r int, exists bool) {
	v := m._Video_ID
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoID returns the old Video_ID value of the Video.
// If the Video object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *VideoMutation) OldVideoID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVideoID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVideoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoID: %w", err)
	}
	return oldValue.VideoID, nil
}

// AddVideoID adds i to Video_ID.
func (m *VideoMutation) AddVideoID(i int) {
	if m.add_Video_ID != nil {
		*m.add_Video_ID += i
	} else {
		m.add_Video_ID = &i
	}
}

// AddedVideoID returns the value that was added to the Video_ID field in this mutation.
func (m *VideoMutation) AddedVideoID() (r int, exists bool) {
	v := m.add_Video_ID
	if v == nil {
		return
	}
	return *v, true
}

// ResetVideoID reset all changes of the "Video_ID" field.
func (m *VideoMutation) ResetVideoID() {
	m._Video_ID = nil
	m.add_Video_ID = nil
}

// SetOwnerID sets the owner edge to User by id.
func (m *VideoMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the owner edge to User.
func (m *VideoMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared returns if the edge owner was cleared.
func (m *VideoMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the owner id in the mutation.
func (m *VideoMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the owner ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *VideoMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner reset all changes of the "owner" edge.
func (m *VideoMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Op returns the operation name.
func (m *VideoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Video).
func (m *VideoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *VideoMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Video_ID != nil {
		fields = append(fields, video.FieldVideoID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *VideoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case video.FieldVideoID:
		return m.VideoID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *VideoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case video.FieldVideoID:
		return m.OldVideoID(ctx)
	}
	return nil, fmt.Errorf("unknown Video field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *VideoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case video.FieldVideoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoID(v)
		return nil
	}
	return fmt.Errorf("unknown Video field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *VideoMutation) AddedFields() []string {
	var fields []string
	if m.add_Video_ID != nil {
		fields = append(fields, video.FieldVideoID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *VideoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case video.FieldVideoID:
		return m.AddedVideoID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *VideoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case video.FieldVideoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVideoID(v)
		return nil
	}
	return fmt.Errorf("unknown Video numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *VideoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *VideoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *VideoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Video nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *VideoMutation) ResetField(name string) error {
	switch name {
	case video.FieldVideoID:
		m.ResetVideoID()
		return nil
	}
	return fmt.Errorf("unknown Video field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *VideoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, video.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *VideoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case video.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *VideoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *VideoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *VideoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, video.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *VideoMutation) EdgeCleared(name string) bool {
	switch name {
	case video.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *VideoMutation) ClearEdge(name string) error {
	switch name {
	case video.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Video unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *VideoMutation) ResetEdge(name string) error {
	switch name {
	case video.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Video edge %s", name)
}
