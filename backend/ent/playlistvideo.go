// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/pongsakorn-maker/entgo-playground/ent/playlist"
	"github.com/pongsakorn-maker/entgo-playground/ent/playlistvideo"
	"github.com/pongsakorn-maker/entgo-playground/ent/resolution"
	"github.com/pongsakorn-maker/entgo-playground/ent/video"
)

// PlaylistVideo is the model entity for the PlaylistVideo schema.
type PlaylistVideo struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaylistVideoQuery when eager-loading is set.
	Edges         PlaylistVideoEdges `json:"edges"`
	playlist_id   *int
	resolution_id *int
	video_id      *int
}

// PlaylistVideoEdges holds the relations/edges for other nodes in the graph.
type PlaylistVideoEdges struct {
	// Video holds the value of the video edge.
	Video *Video
	// Playlists holds the value of the playlists edge.
	Playlists *Playlist
	// Resolution holds the value of the resolution edge.
	Resolution *Resolution
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// VideoOrErr returns the Video value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistVideoEdges) VideoOrErr() (*Video, error) {
	if e.loadedTypes[0] {
		if e.Video == nil {
			// The edge video was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: video.Label}
		}
		return e.Video, nil
	}
	return nil, &NotLoadedError{edge: "video"}
}

// PlaylistsOrErr returns the Playlists value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistVideoEdges) PlaylistsOrErr() (*Playlist, error) {
	if e.loadedTypes[1] {
		if e.Playlists == nil {
			// The edge playlists was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: playlist.Label}
		}
		return e.Playlists, nil
	}
	return nil, &NotLoadedError{edge: "playlists"}
}

// ResolutionOrErr returns the Resolution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistVideoEdges) ResolutionOrErr() (*Resolution, error) {
	if e.loadedTypes[2] {
		if e.Resolution == nil {
			// The edge resolution was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resolution.Label}
		}
		return e.Resolution, nil
	}
	return nil, &NotLoadedError{edge: "resolution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaylistVideo) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*PlaylistVideo) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // playlist_id
		&sql.NullInt64{}, // resolution_id
		&sql.NullInt64{}, // video_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaylistVideo fields.
func (pv *PlaylistVideo) assignValues(values ...interface{}) error {
	if m, n := len(values), len(playlistvideo.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pv.ID = int(value.Int64)
	values = values[1:]
	if len(values) == len(playlistvideo.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field playlist_id", value)
		} else if value.Valid {
			pv.playlist_id = new(int)
			*pv.playlist_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resolution_id", value)
		} else if value.Valid {
			pv.resolution_id = new(int)
			*pv.resolution_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field video_id", value)
		} else if value.Valid {
			pv.video_id = new(int)
			*pv.video_id = int(value.Int64)
		}
	}
	return nil
}

// QueryVideo queries the video edge of the PlaylistVideo.
func (pv *PlaylistVideo) QueryVideo() *VideoQuery {
	return (&PlaylistVideoClient{config: pv.config}).QueryVideo(pv)
}

// QueryPlaylists queries the playlists edge of the PlaylistVideo.
func (pv *PlaylistVideo) QueryPlaylists() *PlaylistQuery {
	return (&PlaylistVideoClient{config: pv.config}).QueryPlaylists(pv)
}

// QueryResolution queries the resolution edge of the PlaylistVideo.
func (pv *PlaylistVideo) QueryResolution() *ResolutionQuery {
	return (&PlaylistVideoClient{config: pv.config}).QueryResolution(pv)
}

// Update returns a builder for updating this PlaylistVideo.
// Note that, you need to call PlaylistVideo.Unwrap() before calling this method, if this PlaylistVideo
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *PlaylistVideo) Update() *PlaylistVideoUpdateOne {
	return (&PlaylistVideoClient{config: pv.config}).UpdateOne(pv)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pv *PlaylistVideo) Unwrap() *PlaylistVideo {
	tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaylistVideo is not a transactional entity")
	}
	pv.config.driver = tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *PlaylistVideo) String() string {
	var builder strings.Builder
	builder.WriteString("PlaylistVideo(")
	builder.WriteString(fmt.Sprintf("id=%v", pv.ID))
	builder.WriteByte(')')
	return builder.String()
}

// PlaylistVideos is a parsable slice of PlaylistVideo.
type PlaylistVideos []*PlaylistVideo

func (pv PlaylistVideos) config(cfg config) {
	for _i := range pv {
		pv[_i].config = cfg
	}
}
