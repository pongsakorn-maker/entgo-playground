// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/pongsakorn-maker/entgo-playground/ent/playlistvideo"
)

// PlaylistVideo is the model entity for the PlaylistVideo schema.
type PlaylistVideo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PlaylistVideoID holds the value of the "PlaylistVideo_ID" field.
	PlaylistVideoID int `json:"PlaylistVideo_ID,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaylistVideo) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // PlaylistVideo_ID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaylistVideo fields.
func (pv *PlaylistVideo) assignValues(values ...interface{}) error {
	if m, n := len(values), len(playlistvideo.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pv.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field PlaylistVideo_ID", values[0])
	} else if value.Valid {
		pv.PlaylistVideoID = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this PlaylistVideo.
// Note that, you need to call PlaylistVideo.Unwrap() before calling this method, if this PlaylistVideo
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *PlaylistVideo) Update() *PlaylistVideoUpdateOne {
	return (&PlaylistVideoClient{config: pv.config}).UpdateOne(pv)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pv *PlaylistVideo) Unwrap() *PlaylistVideo {
	tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaylistVideo is not a transactional entity")
	}
	pv.config.driver = tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *PlaylistVideo) String() string {
	var builder strings.Builder
	builder.WriteString("PlaylistVideo(")
	builder.WriteString(fmt.Sprintf("id=%v", pv.ID))
	builder.WriteString(", PlaylistVideo_ID=")
	builder.WriteString(fmt.Sprintf("%v", pv.PlaylistVideoID))
	builder.WriteByte(')')
	return builder.String()
}

// PlaylistVideos is a parsable slice of PlaylistVideo.
type PlaylistVideos []*PlaylistVideo

func (pv PlaylistVideos) config(cfg config) {
	for _i := range pv {
		pv[_i].config = cfg
	}
}
